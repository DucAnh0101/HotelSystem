// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250725150440_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DOB = new DateOnly(1, 1, 1),
                            Email = "admin@hotel.com",
                            IsDelete = false,
                            Password = "admin123",
                            PhoneNumber = "0123456789",
                            UserId = 1,
                            UserName = "admin"
                        },
                        new
                        {
                            ID = 2,
                            DOB = new DateOnly(1, 1, 1),
                            Email = "manager1@hotel.com",
                            IsDelete = false,
                            Password = "manager123",
                            PhoneNumber = "0987654321",
                            UserId = 2,
                            UserName = "manager1"
                        },
                        new
                        {
                            ID = 3,
                            DOB = new DateOnly(1, 1, 1),
                            Email = "staff1@hotel.com",
                            IsDelete = false,
                            Password = "staff123",
                            PhoneNumber = "0912345678",
                            UserId = 3,
                            UserName = "staff1"
                        },
                        new
                        {
                            ID = 4,
                            DOB = new DateOnly(1, 1, 1),
                            Email = "staff2@hotel.com",
                            IsDelete = false,
                            Password = "staff123",
                            PhoneNumber = "0923456789",
                            UserId = 4,
                            UserName = "staff2"
                        },
                        new
                        {
                            ID = 5,
                            DOB = new DateOnly(1, 1, 1),
                            Email = "customer1@gmail.com",
                            IsDelete = false,
                            Password = "customer123",
                            PhoneNumber = "0934567890",
                            UserId = 5,
                            UserName = "customer1"
                        },
                        new
                        {
                            ID = 6,
                            DOB = new DateOnly(1, 1, 1),
                            Email = "customer2@gmail.com",
                            IsDelete = false,
                            Password = "customer123",
                            PhoneNumber = "0945678901",
                            UserId = 6,
                            UserName = "customer2"
                        },
                        new
                        {
                            ID = 7,
                            DOB = new DateOnly(1, 1, 1),
                            Email = "customer3@gmail.com",
                            IsDelete = false,
                            Password = "customer123",
                            PhoneNumber = "0956789012",
                            UserId = 7,
                            UserName = "customer3"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Attendance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkShiftEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkShiftStart")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ManagerId");

                    b.ToTable("Attendance");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ManagerId = 1,
                            WorkShiftEnd = new DateTime(2025, 7, 25, 16, 0, 0, 0, DateTimeKind.Local),
                            WorkShiftStart = new DateTime(2025, 7, 25, 8, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 2,
                            ManagerId = 1,
                            WorkShiftEnd = new DateTime(2025, 7, 24, 16, 0, 0, 0, DateTimeKind.Local),
                            WorkShiftStart = new DateTime(2025, 7, 24, 8, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 3,
                            ManagerId = 1,
                            WorkShiftEnd = new DateTime(2025, 7, 24, 16, 0, 0, 0, DateTimeKind.Local),
                            WorkShiftStart = new DateTime(2025, 7, 25, 16, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Booking", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RoomId");

                    b.ToTable("Booking");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CheckInTime = new DateTime(2025, 7, 23, 22, 4, 40, 487, DateTimeKind.Local).AddTicks(3546),
                            CustomerId = 1,
                            ManagerId = 1,
                            RoomId = 5,
                            Status = 2,
                            TotalPrice = 1400000m
                        },
                        new
                        {
                            ID = 2,
                            CheckInTime = new DateTime(2025, 7, 26, 22, 4, 40, 487, DateTimeKind.Local).AddTicks(3558),
                            CheckOutTime = new DateTime(2025, 7, 28, 22, 4, 40, 487, DateTimeKind.Local).AddTicks(3559),
                            CustomerId = 2,
                            ManagerId = 1,
                            RoomId = 2,
                            Status = 0,
                            TotalPrice = 1600000m
                        },
                        new
                        {
                            ID = 3,
                            CheckInTime = new DateTime(2025, 7, 20, 22, 4, 40, 487, DateTimeKind.Local).AddTicks(3562),
                            CheckOutTime = new DateTime(2025, 7, 22, 22, 4, 40, 487, DateTimeKind.Local).AddTicks(3563),
                            CustomerId = 3,
                            ManagerId = 1,
                            RoomId = 1,
                            Status = 2,
                            TotalPrice = 1000000m
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BookingId = 1,
                            UserId = 5
                        },
                        new
                        {
                            ID = 2,
                            BookingId = 2,
                            UserId = 6
                        },
                        new
                        {
                            ID = 3,
                            BookingId = 3,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Manager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Manager");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Picture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoomId");

                    b.ToTable("Picture");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PictureUrl = "https://example.com/room1_1.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ID = 2,
                            PictureUrl = "https://example.com/room1_2.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ID = 3,
                            PictureUrl = "https://example.com/room2_1.jpg",
                            RoomId = 2
                        },
                        new
                        {
                            ID = 4,
                            PictureUrl = "https://example.com/room2_2.jpg",
                            RoomId = 2
                        },
                        new
                        {
                            ID = 5,
                            PictureUrl = "https://example.com/room3_1.jpg",
                            RoomId = 3
                        },
                        new
                        {
                            ID = 6,
                            PictureUrl = "https://example.com/room4_1.jpg",
                            RoomId = 4
                        },
                        new
                        {
                            ID = 7,
                            PictureUrl = "https://example.com/room5_1.jpg",
                            RoomId = 5
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("PriceForRent")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerHour")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int?>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Phòng đơn tiêu chuẩn với đầy đủ tiện nghi",
                            PriceForRent = 500000m,
                            PricePerHour = 50000m,
                            Status = 2
                        },
                        new
                        {
                            ID = 2,
                            Description = "Phòng đôi cao cấp với view đẹp",
                            PriceForRent = 800000m,
                            PricePerHour = 80000m,
                            Status = 2
                        },
                        new
                        {
                            ID = 3,
                            Description = "Phòng suite sang trọng với phòng khách riêng",
                            PriceForRent = 1200000m,
                            PricePerHour = 120000m,
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            Description = "Phòng gia đình rộng rãi",
                            PriceForRent = 600000m,
                            PricePerHour = 60000m,
                            Status = 2
                        },
                        new
                        {
                            ID = 5,
                            Description = "Phòng VIP với jacuzzi",
                            PriceForRent = 700000m,
                            PricePerHour = 70000m,
                            Status = 0
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            UserId = 3
                        },
                        new
                        {
                            ID = 2,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AvtUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AvtUrl = "https://example.com/avatar1.jpg",
                            CitizenId = "123456789012",
                            DOB = new DateOnly(1985, 5, 15),
                            FullName = "A",
                            IsMale = true,
                            Role = 0
                        },
                        new
                        {
                            ID = 2,
                            AvtUrl = "https://example.com/avatar2.jpg",
                            CitizenId = "234567890123",
                            DOB = new DateOnly(1988, 8, 20),
                            FullName = "B",
                            IsMale = false,
                            Role = 2
                        },
                        new
                        {
                            ID = 3,
                            AvtUrl = "https://example.com/avatar3.jpg",
                            CitizenId = "345678901234",
                            DOB = new DateOnly(1992, 3, 10),
                            FullName = "C",
                            IsMale = true,
                            Role = 3
                        },
                        new
                        {
                            ID = 4,
                            AvtUrl = "https://example.com/avatar4.jpg",
                            CitizenId = "456789012345",
                            DOB = new DateOnly(1990, 12, 5),
                            FullName = "D",
                            IsMale = false,
                            Role = 3
                        },
                        new
                        {
                            ID = 5,
                            AvtUrl = "https://example.com/avatar5.jpg",
                            CitizenId = "567890123456",
                            DOB = new DateOnly(1995, 7, 25),
                            FullName = "E",
                            IsMale = true,
                            Role = 1
                        },
                        new
                        {
                            ID = 6,
                            AvtUrl = "https://example.com/avatar6.jpg",
                            CitizenId = "678901234567",
                            DOB = new DateOnly(1993, 11, 18),
                            FullName = "F",
                            IsMale = false,
                            Role = 1
                        },
                        new
                        {
                            ID = 7,
                            AvtUrl = "https://example.com/avatar7.jpg",
                            CitizenId = "789012345678",
                            DOB = new DateOnly(1987, 4, 30),
                            FullName = "G",
                            IsMale = true,
                            Role = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.WorkShift", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkShipEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkShipStart")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RoomId");

                    b.HasIndex("StaffId");

                    b.ToTable("WorkShift");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ManagerId = 1,
                            RoomId = 1,
                            StaffId = 1,
                            WorkShipEnd = new DateTime(2025, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkShipStart = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            ManagerId = 1,
                            RoomId = 2,
                            StaffId = 2,
                            WorkShipEnd = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkShipStart = new DateTime(2025, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            ManagerId = 1,
                            RoomId = 3,
                            StaffId = 1,
                            WorkShipEnd = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkShipStart = new DateTime(2025, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            ManagerId = 1,
                            RoomId = 4,
                            StaffId = 2,
                            WorkShipEnd = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkShipStart = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 5,
                            ManagerId = 1,
                            RoomId = 5,
                            StaffId = 1,
                            WorkShipEnd = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkShipStart = new DateTime(2025, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("BusinessObject.Models.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Attendance", b =>
                {
                    b.HasOne("BusinessObject.Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BusinessObject.Models.Booking", b =>
                {
                    b.HasOne("BusinessObject.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Manager", "Manager")
                        .WithMany("Bookings")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Manager");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BusinessObject.Models.Customer", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Manager", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Managers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Picture", b =>
                {
                    b.HasOne("BusinessObject.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BusinessObject.Models.Staff", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Staffs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.WorkShift", b =>
                {
                    b.HasOne("BusinessObject.Models.Manager", "Manager")
                        .WithMany("WorkShifts")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusinessObject.Models.Room", "Room")
                        .WithMany("WorkShifts")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Staff", "Staff")
                        .WithMany("WorkShiftList")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Manager");

                    b.Navigation("Room");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BusinessObject.Models.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BusinessObject.Models.Manager", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("WorkShifts");
                });

            modelBuilder.Entity("BusinessObject.Models.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("WorkShifts");
                });

            modelBuilder.Entity("BusinessObject.Models.Staff", b =>
                {
                    b.Navigation("WorkShiftList");
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Managers");

                    b.Navigation("Staffs");
                });
#pragma warning restore 612, 618
        }
    }
}
